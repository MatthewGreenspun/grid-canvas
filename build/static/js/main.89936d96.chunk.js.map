{"version":3,"sources":["components/Color.tsx","components/CanvasSettings.tsx","components/Canvas.tsx","components/App.tsx","index.tsx"],"names":["Color","color","onRemove","onClick","Box","m","display","borderColor","border","borderRadius","flexGrow","style","backgroundColor","Button","CanvasSettings","colors","setColor","setColors","dimensions","setDimensions","setBorder","setGrid","generateGrid","theme","useTheme","flexDirection","p","palette","secondary","main","padding","boxSizing","margin","type","value","onChange","e","target","onBlur","colorList","add","Set","Array","from","map","delete","Slider","min","max","newVal","FormControlLabel","control","Checkbox","checked","label","ButtonGroup","variant","generateRandomColor","i","Math","floor","random","Canvas","useState","mouseIsDown","setMouseIsDown","isDownloading","setIsDownloading","warningShowed","setWarningShowed","scaleCanvas","useCallback","canvas","dpi","window","devicePixelRatio","styleHeight","getComputedStyle","getPropertyValue","slice","styleWidth","setAttribute","arr","push","grid","canvasRef","useRef","useEffect","current","addEventListener","preventDefault","removeEventListener","ctx","getContext","squareLength","round","width","rows","cols","row","col","strokeStyle","lineWidth","squareX","squareY","beginPath","moveTo","lineTo","stroke","fillStyle","fillRect","flexWrap","alignItems","justifyContent","ref","height","minWidth","maxWidth","maxHeight","aspectRatio","clientX","clientY","currentTarget","getBoundingClientRect","y","x","onMouseMove","onMouseOut","Fab","Dialog","open","onClose","DialogTitle","DialogContent","src","toDataURL","alt","Link","underline","href","download","Snackbar","anchorOrigin","horizontal","vertical","autoHideDuration","Alert","severity","IconButton","App","createMuiTheme","breakpoints","values","xs","sm","md","lg","xl","primary","light","dark","contrastText","ThemeProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89936d96.chunk.js","sourcesContent":["import CloseIcon from \"@material-ui/icons/Close\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\ninterface Props {\r\n  color: string;\r\n  onRemove: (color: string) => any;\r\n  onClick: (color: string) => any;\r\n}\r\n\r\nconst Color: React.FC<Props> = ({ color, onRemove, onClick }) => {\r\n  return (\r\n    <Box\r\n      m={0.25}\r\n      display=\"flex\"\r\n      borderColor=\"black\"\r\n      border=\"1px solid black\"\r\n      borderRadius=\"1000px 0 0 1000px\"\r\n    >\r\n      <Box\r\n        borderRadius=\"1000px 0 0 1000px\"\r\n        flexGrow=\"1\"\r\n        onClick={() => onClick(color)}\r\n        style={{\r\n          backgroundColor: color,\r\n        }}\r\n      />\r\n      <Button onClick={() => onRemove(color)} color=\"primary\">\r\n        <CloseIcon />\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Color;\r\n","import React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Color from \"./Color\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\n\r\ninterface Props {\r\n  dimensions: number;\r\n  setDimensions: React.Dispatch<React.SetStateAction<number>>;\r\n  border: boolean;\r\n  setBorder: React.Dispatch<React.SetStateAction<boolean>>;\r\n  color: string;\r\n  setColor: React.Dispatch<React.SetStateAction<string>>;\r\n  colors: Set<string>;\r\n  setColors: React.Dispatch<React.SetStateAction<Set<string>>>;\r\n  setGrid: React.Dispatch<React.SetStateAction<string[]>>;\r\n  generateGrid: (\r\n    random?: boolean | undefined,\r\n    color?: string | undefined\r\n  ) => string[];\r\n}\r\n\r\nconst CanvasSettings: React.FC<Props> = ({\r\n  color,\r\n  colors,\r\n  setColor,\r\n  setColors,\r\n  dimensions,\r\n  setDimensions,\r\n  border,\r\n  setBorder,\r\n  setGrid,\r\n  generateGrid,\r\n}) => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n      p={2}\r\n      m={2}\r\n      border=\"1px solid black\"\r\n      borderRadius=\"4px\"\r\n      style={{ backgroundColor: theme.palette.secondary.main, color: \"white\" }}\r\n    >\r\n      <input\r\n        style={{\r\n          border: 0,\r\n          padding: 3,\r\n          borderRadius: 400,\r\n          boxSizing: \"content-box\",\r\n          margin: 2,\r\n          backgroundColor: color,\r\n        }}\r\n        type=\"color\"\r\n        value={color}\r\n        onChange={(e) => {\r\n          setColor(e.target.value);\r\n        }}\r\n        onBlur={(e) => {\r\n          setColors((colorList) => {\r\n            colorList.add(e.target.value);\r\n            return new Set(colorList);\r\n          });\r\n        }}\r\n      />\r\n      {Array.from(colors).map((color) => (\r\n        <Color\r\n          key={color}\r\n          color={color}\r\n          onRemove={(color) =>\r\n            setColors((colors) => {\r\n              colors.delete(color);\r\n              return new Set(colors);\r\n            })\r\n          }\r\n          onClick={(color) => setColor(color)}\r\n        />\r\n      ))}\r\n      <Slider\r\n        min={1}\r\n        max={100}\r\n        value={dimensions}\r\n        onChange={(e, newVal) => setDimensions(newVal as number)}\r\n      />\r\n      <h5>\r\n        {dimensions} x {dimensions}\r\n      </h5>\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            color=\"primary\"\r\n            checked={border}\r\n            onChange={(e) => setBorder(e.target.checked)}\r\n          />\r\n        }\r\n        label=\"Show Grid\"\r\n      />\r\n      <ButtonGroup>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          onClick={() => setGrid(generateGrid())}\r\n        >\r\n          Clear\r\n        </Button>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          onClick={() => setGrid(generateGrid(true))}\r\n        >\r\n          Random Colors\r\n        </Button>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          onClick={() => setGrid(generateGrid(false, color))}\r\n        >\r\n          Fill color\r\n        </Button>\r\n      </ButtonGroup>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CanvasSettings;\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport CanvasSettings from \"./CanvasSettings\";\r\n\r\nconst generateRandomColor = () => {\r\n  const posibilities = \"0123456789abcdef\";\r\n  let color = \"#\";\r\n  for (let i = 0; i < 6; i++) {\r\n    color += posibilities[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n};\r\n\r\nfunction Canvas() {\r\n  const [color, setColor] = useState(\"#0055ff\");\r\n  const [colors, setColors] = useState(\r\n    new Set([\"#ffffff\", \"#000000\", color, \"#ff3300\", \"#ffff00\", \"#49d100\"])\r\n  );\r\n  const [dimensions, setDimensions] = useState(16);\r\n  const [mouseIsDown, setMouseIsDown] = useState(false);\r\n  const [border, setBorder] = useState(true);\r\n  const [isDownloading, setIsDownloading] = useState(false);\r\n  const [warningShowed, setWarningShowed] = useState(false);\r\n\r\n  const scaleCanvas = useCallback((canvas: HTMLCanvasElement) => {\r\n    let dpi = window.devicePixelRatio;\r\n    let styleHeight = +getComputedStyle(canvas)\r\n      .getPropertyValue(\"height\")\r\n      .slice(0, -2);\r\n    let styleWidth = +getComputedStyle(canvas)\r\n      .getPropertyValue(\"width\")\r\n      .slice(0, -2);\r\n    canvas.setAttribute(\"height\", `${styleHeight * dpi}`);\r\n    canvas.setAttribute(\"width\", `${styleWidth * dpi}`);\r\n  }, []);\r\n  const generateGrid = useCallback(\r\n    (random?: boolean, color?: string) => {\r\n      const arr = [];\r\n      for (let i = 0; i < dimensions ** 2; i++) {\r\n        arr.push(random ? generateRandomColor() : color ? color : \"#ffffff\");\r\n      }\r\n      return arr;\r\n    },\r\n    [dimensions]\r\n  );\r\n  const [grid, setGrid] = useState(generateGrid);\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n  useEffect(() => {\r\n    setGrid(generateGrid());\r\n  }, [dimensions, generateGrid, scaleCanvas]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    canvas?.addEventListener(\"mousedown\", (e) => {\r\n      e.preventDefault();\r\n      setMouseIsDown(true);\r\n    });\r\n    canvas?.addEventListener(\"mouseup\", () => setMouseIsDown(false));\r\n    return () => {\r\n      canvas?.removeEventListener(\"mousedown\", (e) => {\r\n        e.preventDefault();\r\n        setMouseIsDown(true);\r\n      });\r\n      canvas?.removeEventListener(\"mouseup\", () => setMouseIsDown(false));\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas?.getContext(\"2d\");\r\n    if (ctx && canvas) {\r\n      scaleCanvas(canvas);\r\n\r\n      const squareLength = Math.round(canvas.width / dimensions);\r\n      const rows = dimensions;\r\n      const cols = dimensions;\r\n      let row = 0;\r\n      let col = 0;\r\n      ctx.strokeStyle = \"black\";\r\n      ctx.lineWidth = 3;\r\n      for (row = 0; row < rows; row++) {\r\n        for (col = 0; col < cols; col++) {\r\n          const squareX = col * squareLength;\r\n          const squareY = row * squareLength;\r\n          if (border) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(squareX, squareY);\r\n            ctx.lineTo(squareX + squareLength, squareY);\r\n            ctx.moveTo(squareX, squareY);\r\n            ctx.lineTo(squareX, squareY + squareLength);\r\n            ctx.stroke();\r\n          }\r\n          ctx.fillStyle = grid[rows * row + col];\r\n          ctx.fillRect(squareX, squareY, squareLength, squareLength);\r\n        }\r\n      }\r\n    }\r\n  }, [dimensions, scaleCanvas, grid, border]);\r\n\r\n  return (\r\n    <Box\r\n      display=\"flex\"\r\n      flexWrap=\"wrap\"\r\n      alignItems=\"flex-start\"\r\n      justifyContent=\"center\"\r\n    >\r\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Box border=\"1px solid black\" m={2}>\r\n          <canvas\r\n            ref={canvasRef}\r\n            height={dimensions}\r\n            width={dimensions}\r\n            style={{\r\n              minWidth: \"700px\",\r\n              maxWidth: \"vw\",\r\n              maxHeight: \"vh\",\r\n              aspectRatio: \"1 / 1\",\r\n            }}\r\n            onClick={({ clientX, clientY, currentTarget }) => {\r\n              setGrid((grid) => {\r\n                const squareLength = currentTarget.width / dimensions;\r\n                const row = Math.floor(\r\n                  (clientY - currentTarget.getBoundingClientRect().y) /\r\n                    squareLength\r\n                );\r\n                const col = Math.floor(\r\n                  (clientX - currentTarget.getBoundingClientRect().x) /\r\n                    squareLength\r\n                );\r\n                const idx = row * dimensions + col;\r\n                grid[idx] = color;\r\n                return [...grid];\r\n              });\r\n            }}\r\n            onMouseMove={({ clientX, clientY, currentTarget }) => {\r\n              if (mouseIsDown) {\r\n                setGrid((grid) => {\r\n                  const squareLength = currentTarget.width / dimensions;\r\n                  const row = Math.floor(\r\n                    (clientY - currentTarget.getBoundingClientRect().y) /\r\n                      squareLength\r\n                  );\r\n                  const col = Math.floor(\r\n                    (clientX - currentTarget.getBoundingClientRect().x) /\r\n                      squareLength\r\n                  );\r\n                  const idx = row * dimensions + col;\r\n                  grid[idx] = color;\r\n                  return [...grid];\r\n                });\r\n              }\r\n            }}\r\n            onMouseOut={() => setMouseIsDown(false)}\r\n          />\r\n        </Box>\r\n        <Fab\r\n          onClick={() => setIsDownloading(true)}\r\n          color=\"secondary\"\r\n          variant=\"extended\"\r\n        >\r\n          <GetAppIcon />\r\n          Download\r\n        </Fab>\r\n      </Box>\r\n      <CanvasSettings\r\n        {...{\r\n          dimensions,\r\n          setDimensions,\r\n          border,\r\n          setBorder,\r\n          color,\r\n          setColor,\r\n          setGrid,\r\n          colors,\r\n          setColors,\r\n          generateGrid,\r\n        }}\r\n      />\r\n      {isDownloading && (\r\n        <Dialog open={isDownloading} onClose={() => setIsDownloading(false)}>\r\n          <DialogTitle>Preview Image</DialogTitle>\r\n          <DialogContent>\r\n            <img\r\n              style={{ maxWidth: \"500px\" }}\r\n              src={canvasRef.current?.toDataURL(\"image/png\")}\r\n              alt=\"drawing\"\r\n            />\r\n          </DialogContent>\r\n          <DialogContent>\r\n            <Button color=\"secondary\" variant=\"contained\">\r\n              <Link\r\n                underline=\"none\"\r\n                href={canvasRef.current?.toDataURL(\"img/png\")}\r\n                download\r\n                onClick={() => setIsDownloading(false)}\r\n              >\r\n                Download\r\n              </Link>\r\n            </Button>\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n      {border && dimensions > 40 && (\r\n        <Snackbar\r\n          open={!warningShowed}\r\n          anchorOrigin={{\r\n            horizontal: \"left\",\r\n            vertical: \"bottom\",\r\n          }}\r\n          autoHideDuration={6000}\r\n        >\r\n          <>\r\n            <Alert\r\n              severity=\"warning\"\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                padding: \"0 0 0 12px\",\r\n              }}\r\n            >\r\n              Hiding the grid may improve performance\r\n              <IconButton onClick={() => setWarningShowed(true)}>\r\n                <CloseIcon color=\"secondary\" />\r\n              </IconButton>\r\n            </Alert>\r\n          </>\r\n        </Snackbar>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Canvas;\r\n","import Canvas from \"./Canvas\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/core\";\n\nfunction App() {\n  const theme = createMuiTheme({\n    breakpoints: {\n      values: {\n        xs: 0,\n        sm: 600,\n        md: 770,\n        lg: 1280,\n        xl: 1920,\n      },\n    },\n    palette: {\n      primary: {\n        light: \"#80b4ff\",\n        main: \"#4285f4\",\n        dark: \"#0059c1\",\n        contrastText: \"#fff\",\n      },\n      secondary: {\n        light: \"#62727b\",\n        main: \"#37474f\",\n        dark: \"#102027\",\n        contrastText: \"#fff\",\n      },\n    },\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Canvas />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}